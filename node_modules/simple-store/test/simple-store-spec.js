/*
global describe, it, expect, beforeEach, afterEach
 */

var SimpleStore = require('..')

describe('simple-store', function () {
  describe('with default options', function () {
    var store = new SimpleStore()
    var key, obj
    beforeEach(function () {
      store = new SimpleStore()
      obj = {a: 1, b: 2, c: 3}
      key = 'test'
    })

    it('should add data to the store', function () {
      console.log()
      store.add(key, obj)
      expect(store.data[key]).toEqual(obj)
    })

    it('should remove data from the store', function () {
      store.add(key, obj)
      store.remove(key)
      expect(store.data[key]).toBeUndefined()
    })

    it('should return data from the store by key', function () {
      store.add(key, obj)
      var data = store.get(key)
      expect(data).toEqual(obj)
    })

    it('should throw an error when attempting to retrieve data from a key which doesnt exist', function () {
      expect(function () { store.get(key) }).toThrowError()
    })

    it('should throw an error when attempting to remove data stored against a key which doesnt exist', function () {
      expect(function () {
        store.remove(key)
      })
    })

    it('should throw an error when attempting to add to the store without passing in a valid key', function () {
      expect(function () { store.add(123, obj) }).not.toThrowError()
      expect(function () { store.add('test', obj) }).not.toThrowError()

      expect(function () { store.add({}, obj) }).toThrowError()
      expect(function () { store.add([], obj) }).toThrowError()
    })

    it('should remove an item from data after a timeout', function (done) {
      store.add(key, obj)
      store.removeAfter(key, 300)
      expect(store.data[key]).toBeDefined()
      setTimeout(function () {
        expect(store.data[key]).toBeUndefined()
        done()
      }, 301)
    })

    afterEach(function () {
      store = null
      obj = null
      key = null
    })
  })

  describe('when the dataTimeout option is set', function () {
    var timeout = 300
    var store, key, obj
    beforeEach(function () {
      store = new SimpleStore({dataTimeout: timeout})
      obj = {a: 1, b: 2, c: 3}
      key = 'test'
    })

    it('should delete data in a store if it exists longer than the timeout', function (done) {
      store.add(key, obj)
      expect(store.data[key]).toBeDefined()
      setTimeout(function () {
        expect(store.data[key]).toBeUndefined()
        done()
      }, 301)
    })

    it('should throw if a key has timed out before trying to delete it', function (done) {
      store.add(key, obj)
      expect(store.data[key]).toBeDefined()
      setTimeout(function () {
        expect(store.data[key]).toBeUndefined()
        expect(function () { store.remove(key) }).toThrowError()
        done()
      }, 301)
    })

    it('should throw if a key has timed out before trying to retrieve it', function (done) {
      store.add(key, obj)
      expect(store.data[key]).toBeDefined()
      setTimeout(function () {
        expect(store.data[key]).toBeUndefined()
        expect(function () { store.get(key) }).toThrowError()
        done()
      }, 301)
    })
  })
})
