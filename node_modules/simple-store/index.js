/**
 * A simple store object with get/set methods
 * and optional global/per key data timeout
 */

function parseOptions (defaults, options) {
  var opts = {} // options to use
  var option
  for (option in defaults) {
    if (typeof options[option] === 'undefined') {
      opts[option] = defaults[option]
    } else {
      opts[option] = options[option]
    }
  }
  return opts
}

/**
 * SimpleStore constructor
 * @param {object} options - options to set for this store
 */
function SimpleStore (options) {
  var defaults = {
    dataTimeout: false
  }

  if (options) {
    this.opts = parseOptions(defaults, options)
  } else {
    this.opts = defaults
  }
  this.data = {}
  this.timers = {}

  /**
   * adds data against a specific key in this store
   * @param {string|number} key  - key to store data against
   * @param {any} data    - data to store
   */
  this.add = function (key, data) {
    if (typeof key === 'string' || typeof key === 'number') {
      if (this.opts) {
        if (this.opts.dataTimeout) {
          this.removeAfter(key, this.opts.dataTimeout)
        }
      }
      this.data[key] = data
    } else {
      if (key == undefined) throw new Error('no key was supplied for SimpleStore.add()')
      else throw new Error('the key argument for SimpleStore.add() must be of type string')
    }
  }

  /**
   * removes an element from the store
   * @param  {string|function} key - the key to remove or a function which returns the key to remove
   *                                 the function is passed this stores data
   */
  this.remove = function (key) {
    if (this.get(key) == undefined) {
      throw new Error('SimpletStore.remove() - key: ' + key + ' does not exist in the store')
    } else {
      delete this.data[key]
    }
  }

  /**
   * Removes an element from the store after a set time
   * @param  {string|number} key - key of the object for deletion
   * @param  {number} timeout    - timeout in ms
   */
  this.removeAfter = function (key, timeout) {
    if (typeof key === 'undefined') {
      throw new Error('no key supplied for SimpleStore.removeAfter()')
    }
    if (typeof timeout !== 'number') {
      throw new Error('invalid timeout set for SimpleStore.removeAfter()')
    }
    var _this = this
    this.timers[key] = setTimeout(function () {
      _this.remove(key)
    }, timeout)
  }

  /**
   * returns this stores full data or data for a specified key
   * @return {[type]} [description]
   */
  this.get = function (key) {
    if (key !== 'undefined') {
      if (typeof key === 'function') {
        key = key(this.data)
      }
      if (typeof this.data[key] !== 'undefined') {
        return this.data[key]
      } else {
        throw new Error('SimpleStore.get() - no data exists for SimpleStore.data[' + key + ']')
      }
    } else {
      return this.data
    }
  }
}

module.exports = SimpleStore
