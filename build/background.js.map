{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/simple-store/index.js","src/background/background.js","src/common/helloworld.js"],"names":[],"mappingsvEA;AACA;AACA;AACA;AACA","file":"background.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * A simple store object with get/set methods\n * and optional global/per key data timeout\n */\n\nfunction parseOptions (defaults, options) {\n  var opts = {} // options to use\n  var option\n  for (option in defaults) {\n    if (typeof options[option] === 'undefined') {\n      opts[option] = defaults[option]\n    } else {\n      opts[option] = options[option]\n    }\n  }\n  return opts\n}\n\n/**\n * SimpleStore constructor\n * @param {object} options - options to set for this store\n */\nfunction SimpleStore (options) {\n  var defaults = {\n    dataTimeout: false\n  }\n\n  if (options) {\n    this.opts = parseOptions(defaults, options)\n  } else {\n    this.opts = defaults\n  }\n  this.data = {}\n  this.timers = {}\n\n  /**\n   * adds data against a specific key in this store\n   * @param {string|number} key  - key to store data against\n   * @param {any} data    - data to store\n   */\n  this.add = function (key, data) {\n    if (typeof key === 'string' || typeof key === 'number') {\n      if (this.opts) {\n        if (this.opts.dataTimeout) {\n          this.removeAfter(key, this.opts.dataTimeout)\n        }\n      }\n      this.data[key] = data\n    } else {\n      if (key == undefined) throw new Error('no key was supplied for SimpleStore.add()')\n      else throw new Error('the key argument for SimpleStore.add() must be of type string')\n    }\n  }\n\n  /**\n   * removes an element from the store\n   * @param  {string|function} key - the key to remove or a function which returns the key to remove\n   *                                 the function is passed this stores data\n   */\n  this.remove = function (key) {\n    if (this.get(key) == undefined) {\n      throw new Error('SimpletStore.remove() - key: ' + key + ' does not exist in the store')\n    } else {\n      delete this.data[key]\n    }\n  }\n\n  /**\n   * Removes an element from the store after a set time\n   * @param  {string|number} key - key of the object for deletion\n   * @param  {number} timeout    - timeout in ms\n   */\n  this.removeAfter = function (key, timeout) {\n    if (typeof key === 'undefined') {\n      throw new Error('no key supplied for SimpleStore.removeAfter()')\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error('invalid timeout set for SimpleStore.removeAfter()')\n    }\n    var _this = this\n    this.timers[key] = setTimeout(function () {\n      _this.remove(key)\n    }, timeout)\n  }\n\n  /**\n   * returns this stores full data or data for a specified key\n   * @return {[type]} [description]\n   */\n  this.get = function (key) {\n    if (key !== 'undefined') {\n      if (typeof key === 'function') {\n        key = key(this.data)\n      }\n      if (typeof this.data[key] !== 'undefined') {\n        return this.data[key]\n      } else {\n        throw new Error('SimpleStore.get() - no data exists for SimpleStore.data[' + key + ']')\n      }\n    } else {\n      return this.data\n    }\n  }\n}\n\nmodule.exports = SimpleStore\n","'use strict';\n\nvar SimpleStore = require('simple-store');\nvar store = new SimpleStore();\n\nconsole.log(require('../common/helloworld.js')());\n\nchrome.runtime.onMessage.addListener(\n  function (request, sender, sendResponse) {\n    console.log('::(BG) request ->', request);\n    if (request.data) {\n      store.add('data', request.data);\n      console.log('::(BG) simple-store data -> ',store.get('data'));\n      store.removeAfter('data', 10000);\n      sendResponse({storredData: request.data});\n    }\n\n    if (request === 'request-data') {\n      sendResponse(store.get('data'));\n    } \n\n    if (request === 'regex message') {\n      sendResponse('::(BG) /regex/ was found!');\n    }\n  });\n\nchrome.runtime.onMessage.addListener(\n  function (request, sender, sendResponse) {\n\n  if (request.type === 'css-injection') {\n    console.log('::(BG) request -> ' + request.type);\n    chrome.tabs.query({active: true}, function (tab) {\n      chrome.tabs.executeScript(\n        tab[tab.length - 1].id, {\n        code: 'document.body.style.backgroundColor=\"red\"'\n      });\n      console.log('::(BG) Sending to tabID ->', tab[tab.length - 1].id);\n      chrome.tabs.sendMessage(tab[tab.length - 1].id, {action: 'do-something'}, function (response) {\n        console.log(response);\n      });\n    });   \n  }\n});\n\nchrome.tabs.onActivated.addListener(function (tab) {\n  var selectedTab = tab;\n  console.log('::(BG) Current tab ->', selectedTab);\n});\n\n// chrome.storage.onChanged.addListener(function(changes, namespace) {\n//   for (key in changes) {\n//     var storageChange = changes[key];\n//     console.log('Storage key \"%s\" in namespace \"%s\" changed. ' +\n//     'Old value was \"%s\", new value is \"%s\".',\n//     key,\n//     namespace,\n//     storageChange.oldValue,\n//     storageChange.newValue);\n//   }\n\n//   chrome.storage.sync.get(['client', 'product'], function(details) {\n//     var msg = 'Client: ' + details.client + ' \\nProduct: ' + details.product;\n//     var options = {\n//       type: 'basic',\n//       title: 'Input changed!',\n//       message: msg,\n//       iconUrl: 'icon.png'\n//     };\n\n//   chrome.notifications.create(options);\n//   });\n// });","function helloWorld() {\n  return 'Hello World';\n}\n\nmodule.exports = helloWorld;"]}